---
name: Manual Build & Test & Publish

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: |
          'Version to manually release'
        required: true
        type: string
      dry_run:
        description: |
          'Dry run mode build but do not publish'
        type: boolean
        default: true
  workflow_call:
    inputs:
      release_tag:
        description: |
          'Version to manually release'
        required: true
        type: string
      dry_run:
        description: |
          'Dry run mode build but do not publish'
        type: boolean
        default: true

permissions:
  id-token: write  # required to use OIDC authentication
  contents: write  # required to checkout the code from the repo and to perform release
  packages: write  # required to publish to packages
  pull-requests: write

jobs:
  check:
    name: GitHub Prerequisites Check
    runs-on: ubuntu-latest
    outputs:
      has_gh_secrets: ${{ steps.check-gh-key-secret.outputs.declared }}
    steps:
      - name: Check for GitHub Secret availability
        id: check-gh-key-secret
        shell: bash
        run: |
          if [[ ! -z  "${{ secrets.GITHUB_TOKEN }}" ]]; then
            echo "All secrets are declared."
            echo "declared=true" >> $GITHUB_OUTPUT;
          else
            echo "GITHUB_TOKEN secret is missing."
            exit 1
          fi

      - name: Release Title - ${{ inputs.release_tag }}
        if: ( inputs.dry_run == false )
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ inputs.release_tag }}"
          append_body: true
          body: |
            ## GitHub Packages
          token: ${{ secrets.GITHUB_TOKEN }}

  maven:
    name: GitHub Packages - Maven Build & Publish
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    needs: [check]
    if: |
      needs.check.outputs.has_gh_secrets
    env:
      REPOSITORY_URL: "https://maven.pkg.github.com/${{ github.repository }}"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: main

      - uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          server-id: projectrepo
          settings-path: ${{ github.workspace }}/.mvn
          cache: maven

      - name: Maven Test
        id: mvn-test
        shell: bash
        run: |
          mvn --settings ${GITHUB_WORKSPACE}/.mvn/settings.xml -N wrapper:wrapper
          ./mvnw --settings ${GITHUB_WORKSPACE}/.mvn/settings.xml dependency:resolve
          ./mvnw --settings ${GITHUB_WORKSPACE}/.mvn/settings.xml test

      - name: Maven Package
        if: success()
        id: mvn-package
        shell: bash
        run: |
          ./mvnw versions:set -DnewVersion=${{ inputs.release_tag }} -DgenerateBackupPoms=false
          ./mvnw --settings ${GITHUB_WORKSPACE}/.mvn/settings.xml package

      - name: Publish to GitHub Packages
        if: |
          success()
          && ( inputs.dry_run == false )
        run: ./mvnw --settings ${GITHUB_WORKSPACE}/.mvn/settings.xml --batch-mode deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release Update - ${{ inputs.release_tag }}
        if: |
          success()
          && ( inputs.dry_run == false )
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ inputs.release_tag }}"
          append_body: true
          body: |
            - GitHub Packages Maven URL: ${{ env.REPOSITORY_URL }}
          token: ${{ secrets.GITHUB_TOKEN }}

  container:
    name: GitHub Packages - Container Build & Publish
    runs-on: ubuntu-latest
    needs: [check]
    if: |
      needs.check.outputs.has_gh_secrets
    env:
      REGISTRY: ghcr.io
      REPOSITORY: ${{ github.repository }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: main

      - uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          server-id: projectrepo
          settings-path: ${{ github.workspace }}/.mvn
          cache: maven

      - name: Maven Wrapper
        id: mvn-wrapper
        shell: bash
        run: |
          mvn --settings ${GITHUB_WORKSPACE}/.mvn/settings.xml -N wrapper:wrapper

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2.2.0

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2.9.0

      - name: Docker Test
        id: docker-test
        env:
          DOCKER_BUILDKIT: 1
          REGISTRY: ${{ env.REGISTRY}}
          REPOSITORY: ${{ github.repository }}
          IMAGE_TAG: ${{ github.sha }}-test
        run: >
          docker buildx build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG
          --cache-from type=gha --cache-to type=gha,mode=max
          --target export-test-results
          --build-arg REPOSITORY_URL="${{ env.REPOSITORY_URL }}"
          --build-arg REPOSITORY_AUTH_USER="${{ github.repository_owner }}"
          --build-arg REPOSITORY_AUTH_TOKEN="${{ secrets.GITHUB_TOKEN }}"
          --output type=tar,dest=./out . ;
          cat ./out

      - name: Log in to the Container registry
        if: |
          success()
          && ( inputs.dry_run == false )
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        if: |
          success()
          && ( inputs.dry_run == false )
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}
          tags: |
            type=raw,value=latest
            type=sha
            type=sha,format=long
            type=semver,pattern={{version}},value=${{ inputs.release_tag }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        if: |
          success()
          && ( inputs.dry_run == false )
        with:
          context: .
          target: production
          push: true
          builder: ${{ steps.buildx.outputs.name }}
          # it uses github cache API for faster builds:
          # https://github.com/docker/build-push-action/blob/master/docs/advanced/cache.md#cache-backend-api
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Release Update - ${{ inputs.release_tag }}
        uses: softprops/action-gh-release@v1
        if: |
          success()
          && ( inputs.dry_run == false )
        env:
          REGISTRY: ${{ env.REGISTRY }}
          REPOSITORY: ${{ github.repository }}
        with:
          tag_name: "v${{ inputs.release_tag }}"
          append_body: true
          body: |
            - GitHub Packages Container URL: ${{ env.REGISTRY }}/${{ github.repository }}:${{ inputs.release_tag }}
          token: ${{ secrets.GITHUB_TOKEN }}